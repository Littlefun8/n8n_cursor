{
  "name": "Agent - Feishu Drive -> OCR -> Grade -> Bitable",
  "nodes": [
    { "parameters": {}, "id": "manualTrigger", "name": "Manual Trigger", "type": "n8n-nodes-base.manualTrigger", "typeVersion": 1, "position": [200, 240] },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            { "name": "feishu_folder_token", "value": "{{$env.FEISHU_FOLDER_TOKEN || ''}}" },
            { "name": "bitable_app_token", "value": "{{$env.FEISHU_BITABLE_APP_TOKEN || ''}}" },
            { "name": "bitable_table_id", "value": "{{$env.FEISHU_BITABLE_TABLE_ID || ''}}" },
            { "name": "rubric_version", "value": "gaokao_read_after_writing_v1.0" },
            { "name": "model_name", "value": "{{$env.SILICONFLOW_VISION_MODEL || 'THUDM/GLM-4.1V-9B-Thinking'}}" },
            { "name": "siliconflow_api_url", "value": "{{$env.SILICONFLOW_API_URL || 'https://api.siliconflow.cn/v1/chat/completions'}}" },
            { "name": "audit_status_default", "value": "待审核" }
          ],
          "number": [
            { "name": "total_score_max", "value": 25 },
            { "name": "weight_content", "value": 0.4 },
            { "name": "weight_structure", "value": 0.25 },
            { "name": "weight_language", "value": 0.25 },
            { "name": "weight_vocabulary", "value": 0.1 }
          ]
        },
        "options": {}
      },
      "id": "configSet",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [420, 240]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal",
        "jsonParameters": true,
        "sendBody": true,
        "bodyParametersJson": "={\n  \"app_id\": \"{{$env.FEISHU_APP_ID}}\",\n  \"app_secret\": \"{{$env.FEISHU_APP_SECRET}}\"\n}"
      },
      "id": "feishuToken",
      "name": "Feishu Tenant Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [660, 240]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "GET",
        "url": "=https://open.feishu.cn/open-apis/drive/v1/files",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$items('Feishu Tenant Token')[0].json.tenant_access_token}}\"\n}",
        "sendQuery": true,
        "queryParametersJson": "={\n  \"folder_token\": \"{{$items('Config')[0].json.feishu_folder_token}}\"\n}"
      },
      "id": "feishuListFiles",
      "name": "Feishu List Files",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 240]
    },
    {
      "parameters": {
        "functionCode": "const token = $items('Feishu Tenant Token')[0].json.tenant_access_token; const files = $json.data?.files || []; return files.filter(f=>/\n?(jpg|jpeg|png|webp)$/i.test(f.name||'')).map(f=>({ json: { file_token: f.token||f.file_token||f.file?.token, file_name: f.name, tenant_access_token: token } }));"
      },
      "id": "fnNormalizeFiles",
      "name": "Fn Normalize Files",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1140, 240]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "GET",
        "url": "=https://open.feishu.cn/open-apis/drive/v1/files/{{$json.file_token}}/download",
        "jsonParameters": false,
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$json.tenant_access_token}}\"\n}",
        "responseFormat": "file"
      },
      "id": "feishuDownload",
      "name": "Feishu Download Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1380, 240]
    },
    {
      "parameters": { "setAllData": false, "binaryPropertyName": "data", "dataIsBase64": true },
      "id": "binaryToBase64",
      "name": "Binary -> Base64",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [1620, 240]
    },
    {
      "parameters": { "functionCode": "const mime=$binary.data?.mimeType||'image/jpeg'; const b64=$json.data; return [{ json: { file_name: $items('Fn Normalize Files')[0].json.file_name, image_data_url: `data:${mime};base64,${b64}` } }];" },
      "id": "fnDataUrl",
      "name": "Fn To Data URL",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1860, 240]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "={{$items('Config')[0].json.siliconflow_api_url}}",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$env.SILICONFLOW_API_KEY}}\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "bodyParametersJson": "={\n  \"model\": \"{{$items('Config')[0].json.model_name}}\",\n  \"messages\": [ { \n    \"role\": \"user\", \n    \"content\": [ { \n      \"type\": \"text\", \n      \"text\": \"请帮我识别图片中的所有英文字符，只输出英文字符本身，不需要任何解释或额外信息。\" \n    }, { \n      \"type\": \"image_url\", \n      \"image_url\": { \n        \"url\": \"{{$json.image_data_url}}\" \n      } \n    } ] \n  } ],\n  \"temperature\": 0\n}"
      },
      "id": "sfOCR",
      "name": "SiliconFlow OCR",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2100, 240]
    },
    {
      "parameters": { "functionCode": "const text=$json.choices?.[0]?.message?.content||''; return [{ json: { ocr_text: text, file_name: $items('Fn To Data URL')[0].json.file_name } }];" },
      "id": "fnExtractOcr",
      "name": "Fn Extract OCR",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2340, 240]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "={{$items('Config')[0].json.siliconflow_api_url}}",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$env.SILICONFLOW_API_KEY}}\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "bodyParametersJson": "={\n  \"model\": \"{{$items('Config')[0].json.model_name}}\",\n  \"messages\": [ { \n    \"role\": \"system\", \n    \"content\": \"You are a strict grader for Chinese Gaokao English 'Read-after-writing' continuation tasks. Score out of {{$items('Config')[0].json.total_score_max}} with weighted criteria. Output JSON only.\" \n  }, { \n    \"role\": \"user\", \n    \"content\": [ { \n      \"type\": \"text\", \n      \"text\": \"Task: Grade the following OCR-ed handwritten essay. Return STRICT JSON only (no code fences, no extra text) following schema: {\\n  \\\"source_id\\\": string,\\n  \\\"total_score\\\": number,\\n  \\\"content_relevance\\\": number,\\n  \\\"structure_coherence\\\": number,\\n  \\\"language_accuracy\\\": number,\\n  \\\"vocabulary_richness\\\": number,\\n  \\\"word_count\\\": number,\\n  \\\"reasons\\\": { \\\"content\\\": string, \\\"structure\\\": string, \\\"language\\\": string, \\\"overall\\\": string },\\n  \\\"extracted_text\\\": string,\\n  \\\"rubric_version\\\": string,\\n  \\\"model_name\\\": string,\\n  \\\"confidence\\\": number\\n}. Essay: {{{{{$items('Fn Extract OCR')[0].json.ocr_text}}}}}\" \n    } ] \n  } ],\n  \"temperature\": 0\n}"
      },
      "id": "sfGrade",
      "name": "SiliconFlow Grade JSON",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2580, 240]
    },
    {
      "parameters": { "functionCode": "function tryParse(s){ try { return JSON.parse(s); } catch { return null; } }\nlet raw = $json.choices?.[0]?.message?.content?.trim?.() || '';\nraw = raw.replace(/^```json[\r\n]+/i,'').replace(/```$/,'');\nconst i = raw.indexOf('{'); const j = raw.lastIndexOf('}');\nconst pick = (i>=0 && j>=i) ? raw.slice(i, j+1) : raw;\nconst data = tryParse(pick) || tryParse(raw) || {};\nconst maxScore = Number($items('Config')[0].json.total_score_max)||25;\nconst ocrText = $items('Fn Extract OCR')[0].json.ocr_text || '';\nconst sourceId = $items('Fn Extract OCR')[0].json.file_name || '';\nfunction num(n,d=0){ const v=Number(n); return Number.isFinite(v)?v:d; }\nfunction str(s,d=''){ return typeof s==='string'?s:d; }\nreturn [{ json: {\n  source_id: str(data.source_id, sourceId),\n  total_score: Math.max(0, Math.min(maxScore, num(data.total_score))),\n  content_relevance: Math.max(0, num(data.content_relevance)),\n  structure_coherence: Math.max(0, num(data.structure_coherence)),\n  language_accuracy: Math.max(0, num(data.language_accuracy)),\n  vocabulary_richness: Math.max(0, num(data.vocabulary_richness)),\n  word_count: Math.max(0, Math.floor(num(data.word_count, ocrText.split(/\\s+/).filter(Boolean).length))),\n  reasons: {\n    content: str(data?.reasons?.content),\n    structure: str(data?.reasons?.structure),\n    language: str(data?.reasons?.language),\n    overall: str(data?.reasons?.overall)\n  },\n  extracted_text: str(data.extracted_text, ocrText),\n  rubric_version: str(data.rubric_version, $items('Config')[0].json.rubric_version),\n  model_name: str(data.model_name, $items('Config')[0].json.model_name),\n  confidence: Math.max(0, Math.min(1, Number.isFinite(Number(data.confidence)) ? Number(data.confidence) : 0.7))\n} }];" },
      "id": "fnEnsureJson",
      "name": "Fn Ensure JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2820, 240]
    },
    {
      "parameters": { "functionCode": "const cfg=$items('Config')[0].json; const src=$items('Fn Extract OCR')[0].json; const fields={\n  '来源类型': 'feishu',\n  '文件标识': src.file_name || $json.source_id || '',\n  '图片URL': '',\n  'OCR文本': $json.extracted_text || '',\n  '总分': $json.total_score,\n  '内容相关性': $json.content_relevance,\n  '结构连贯': $json.structure_coherence,\n  '语言准确性': $json.language_accuracy,\n  '词汇丰富度': $json.vocabulary_richness,\n  '字数': $json.word_count,\n  '评分说明-内容': $json.reasons?.content || '',\n  '评分说明-结构': $json.reasons?.structure || '',\n  '评分说明-语言': $json.reasons?.language || '',\n  '评分说明-总体': $json.reasons?.overall || '',\n  '审核状态': cfg.audit_status_default || '待审核',\n  '模型': $json.model_name,\n  'Rubric版本': $json.rubric_version,\n  '置信度': $json.confidence,\n  '创建时间': new Date().toISOString()\n}; return [{ json: { fields } }];" },
      "id": "fnMapBitable",
      "name": "Fn Map -> Bitable Fields",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [3060, 240]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal",
        "jsonParameters": true,
        "sendBody": true,
        "bodyParametersJson": "={\n  \"app_id\": \"{{$env.FEISHU_APP_ID}}\",\n  \"app_secret\": \"{{$env.FEISHU_APP_SECRET}}\"\n}"
      },
      "id": "feishuToken2",
      "name": "Feishu Tenant Token (Write)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3300, 240]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "=https://open.feishu.cn/open-apis/bitable/v1/apps/{{$items('Config')[0].json.bitable_app_token}}/tables/{{$items('Config')[0].json.bitable_table_id}}/records/batch_create",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$items('Feishu Tenant Token (Write)')[0].json.tenant_access_token}}\",\n  \"Content-Type\": \"application/json; charset=utf-8\"\n}",
        "sendBody": true,
        "bodyParametersJson": "={\n  \"records\": [ { \n    \"fields\": {{$json.fields}} \n  } ]\n}"
      },
      "id": "bitableCreate",
      "name": "Feishu Bitable Create",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3540, 240]
    }
  ],
  "connections": {
    "Manual Trigger": { "main": [ [ { "node": "Config", "type": "main", "index": 0 } ] ] },
    "Config": { "main": [ [ { "node": "Feishu Tenant Token", "type": "main", "index": 0 } ] ] },
    "Feishu Tenant Token": { "main": [ [ { "node": "Feishu List Files", "type": "main", "index": 0 } ] ] },
    "Feishu List Files": { "main": [ [ { "node": "Fn Normalize Files", "type": "main", "index": 0 } ] ] },
    "Fn Normalize Files": { "main": [ [ { "node": "Feishu Download Image", "type": "main", "index": 0 } ] ] },
    "Feishu Download Image": { "main": [ [ { "node": "Binary -> Base64", "type": "main", "index": 0 } ] ] },
    "Binary -> Base64": { "main": [ [ { "node": "Fn To Data URL", "type": "main", "index": 0 } ] ] },
    "Fn To Data URL": { "main": [ [ { "node": "SiliconFlow OCR", "type": "main", "index": 0 } ] ] },
    "SiliconFlow OCR": { "main": [ [ { "node": "Fn Extract OCR", "type": "main", "index": 0 } ] ] },
    "Fn Extract OCR": { "main": [ [ { "node": "SiliconFlow Grade JSON", "type": "main", "index": 0 } ] ] },
    "SiliconFlow Grade JSON": { "main": [ [ { "node": "Fn Ensure JSON", "type": "main", "index": 0 } ] ] },
    "Fn Ensure JSON": { "main": [ [ { "node": "Fn Map -> Bitable Fields", "type": "main", "index": 0 } ] ] },
    "Fn Map -> Bitable Fields": { "main": [ [ { "node": "Feishu Tenant Token (Write)", "type": "main", "index": 0 } ] ] },
    "Feishu Tenant Token (Write)": { "main": [ [ { "node": "Feishu Bitable Create", "type": "main", "index": 0 } ] ] }
  },
  "active": false,
  "settings": { "saveExecutionProgress": true },
  "staticData": null,
  "id": "agent-feishu-ocr-grade"
}


