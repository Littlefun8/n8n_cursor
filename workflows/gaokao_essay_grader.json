{
  "name": "Gaokao English Continuation Essay Grader (Supabase/Feishu -> GLM-4V -> Feishu Bitable)",
  "nodes": [
    {
      "parameters": {},
      "id": "manualTrigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        260
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "source_type",
              "value": "supabase"
            },
            {
              "name": "rubric_version",
              "value": "gaokao_read_after_writing_v1.0"
            },
            {
              "name": "glm_vision_model",
              "value": "{{$env.GLM_VISION_MODEL || 'glm-4v'}}"
            },
            {
              "name": "glm_api_url",
              "value": "{{$env.GLM_API_URL || 'https://open.bigmodel.cn/api/paas/v4/chat/completions'}}"
            },
            {
              "name": "feishu_folder_token",
              "value": "{{$env.FEISHU_FOLDER_TOKEN || ''}}"
            },
            {
              "name": "supabase_bucket",
              "value": "{{$env.SUPABASE_BUCKET || ''}}"
            },
            {
              "name": "supabase_prefix",
              "value": "{{$env.SUPABASE_PREFIX || ''}}"
            },
            {
              "name": "bitable_app_token",
              "value": "{{$env.FEISHU_BITABLE_APP_TOKEN || ''}}"
            },
            {
              "name": "bitable_table_id",
              "value": "{{$env.FEISHU_BITABLE_TABLE_ID || ''}}"
            },
            {
              "name": "audit_status_default",
              "value": "待审核"
            }
          ],
          "number": [
            {
              "name": "batch_size",
              "value": 5
            },
            {
              "name": "weight_content",
              "value": 0.4
            },
            {
              "name": "weight_structure",
              "value": 0.25
            },
            {
              "name": "weight_language",
              "value": 0.25
            },
            {
              "name": "weight_vocabulary",
              "value": 0.1
            },
            {
              "name": "total_score_max",
              "value": 25
            }
          ],
          "boolean": [
            {
              "name": "supabase_use_signed_url",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "configSet",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        460,
        260
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.source_type}}",
              "operation": "equal",
              "value2": "supabase"
            }
          ]
        }
      },
      "id": "ifSourceSupabase",
      "name": "IF Source = Supabase",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        260
      ]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "={{$env.SUPABASE_URL}}/storage/v1/object/list/{{$json.supabase_bucket}}",
        "jsonParameters": true,
        "options": {},
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$env.SUPABASE_SERVICE_ROLE_KEY}}\",\n  \"apikey\": \"{{$env.SUPABASE_SERVICE_ROLE_KEY}}\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "bodyParametersJson": "={\n  \"prefix\": \"{{$json.supabase_prefix}}\",\n  \"limit\": 1000\n}"
      },
      "id": "supabaseList",
      "name": "Supabase List Objects",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        960,
        120
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "={{Array.isArray($json) ? 'root' : 'data'}}",
        "options": {}
      },
      "id": "splitSupabase",
      "name": "Split Supabase Items",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 1,
      "position": [
        1180,
        120
      ]
    },
    {
      "parameters": {
        "functionCode": "// Normalize Supabase list to one item per file\n// Input could be an array of objects with 'name' or 'id'\nconst input = Array.isArray(items[0].json) ? items[0].json : (items[0].json.data || items.map(i => i.json));\nconst bucket = $json.supabase_bucket || $items('Config')[0].json.supabase_bucket;\nconst prefix = $json.supabase_prefix || $items('Config')[0].json.supabase_prefix;\nconst useSigned = $items('Config')[0].json.supabase_use_signed_url;\n\nreturn input\n  .filter(f => f && (f.name || f.id || f.path))\n  .map(f => {\n    const name = f.name || f.id || f.path;\n    const path = prefix ? `${prefix.replace(/\\/g,'/').replace(/\/$/,'')}/${name}` : name;\n    return { json: {\n      source_type: 'supabase',\n      bucket,\n      path,\n      file_name: name,\n      use_signed: useSigned\n    }};\n  });"
      },
      "id": "fnSupabaseNormalize",
      "name": "Fn Normalize Supabase",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1400,
        120
      ]
    },
    {
      "parameters": {
        "functionCode": "// Build a signed URL if requested, else public URL.\nconst supabaseUrl = $env.SUPABASE_URL;\nconst bucket = $json.bucket;\nconst path = $json.path;\nconst publicUrl = `${supabaseUrl}/storage/v1/object/public/${bucket}/${encodeURI(path)}`;\nreturn [{ json: { ...$json, image_url: publicUrl }}];"
      },
      "id": "fnSupabasePublicUrl",
      "name": "Fn Supabase Public URL",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1600,
        120
      ]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "GET",
        "url": "={{$json.image_url}}",
        "jsonParameters": false,
        "responseFormat": "file",
        "options": {}
      },
      "id": "downloadImage",
      "name": "Download Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1820,
        120
      ]
    },
    {
      "parameters": {
        "options": {},
        "setAllData": false,
        "binaryPropertyName": "data",
        "dataIsBase64": true
      },
      "id": "binaryToBase64",
      "name": "Binary -> Base64",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        2040,
        120
      ]
    },
    {
      "parameters": {
        "functionCode": "// Prefix data URL for GLM vision\nconst mime = $binary.data && $binary.data.mimeType ? $binary.data.mimeType : 'image/jpeg';\nconst b64 = $json.data;\nreturn [{ json: { ...$json, image_data_url: `data:${mime};base64,${b64}` } }];"
      },
      "id": "fnDataUrl",
      "name": "Fn To Data URL",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        2260,
        120
      ]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "={{$items('Config')[0].json.glm_api_url}}",
        "allowUnauthorizedCerts": false,
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$env.GLM_API_KEY}}\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "bodyParametersJson": "={\n  \"model\": \"{{$items('Config')[0].json.glm_vision_model}}\",\n  \"temperature\": 0,\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an OCR engine for handwritten English essays. Output plain English transcript only. Keep line breaks, no extra commentary. Use (?) for uncertain words.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"OCR the image and return ONLY the transcript text.\"\n        },\n        {\n          \"type\": \"input_image\",\n          \"image_url\": \"{{$json.image_data_url}}\"\n        }\n      ]\n    }\n  ]\n}"
      },
      "id": "glmOCR",
      "name": "GLM-4V OCR",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2480,
        120
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract OCR text from GLM response\nconst choice = $json.choices && $json.choices[0] ? $json.choices[0] : null;\nconst text = choice && choice.message && choice.message.content ? choice.message.content : '';\nreturn [{ json: { ocr_text: text, source_type: $items(0,0).json.source_type || 'supabase', file_name: $items(0,0).json.file_name || '', image_url: $items(0,0).json.image_url || '', image_data_url: $items(0,0).json.image_data_url || '' } }];"
      },
      "id": "fnExtractOcr",
      "name": "Fn Extract OCR",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        2700,
        120
      ]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "={{$items('Config')[0].json.glm_api_url}}",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$env.GLM_API_KEY}}\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "bodyParametersJson": "={\n  \"model\": \"{{$items('Config')[0].json.glm_vision_model}}\",\n  \"temperature\": 0,\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a strict grader for Chinese Gaokao English 'Read-after-writing' continuation tasks. Score out of {{$items('Config')[0].json.total_score_max}} with weights: content {{$items('Config')[0].json.weight_content}}, structure {{$items('Config')[0].json.weight_structure}}, language {{$items('Config')[0].json.weight_language}}, vocabulary {{$items('Config')[0].json.weight_vocabulary}}. Output JSON only, matching the schema.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"Task: Grade the following OCR-ed handwritten essay per Gaokao continuation rubric. Return STRICT JSON only (no code fences, no extra text) following this schema: {\\n  \\\"source_id\\\": string,\\n  \\\"total_score\\\": number,\\n  \\\"content_relevance\\\": number,\\n  \\\"structure_coherence\\\": number,\\n  \\\"language_accuracy\\\": number,\\n  \\\"vocabulary_richness\\\": number,\\n  \\\"word_count\\\": number,\\n  \\\"reasons\\\": { \\\"content\\\": string, \\\"structure\\\": string, \\\"language\\\": string, \\\"overall\\\": string },\\n  \\\"extracted_text\\\": string,\\n  \\\"rubric_version\\\": string,\\n  \\\"model_name\\\": string,\\n  \\\"confidence\\\": number\\n}. Constraints: total_score in [0, {{$items('Config')[0].json.total_score_max}}]; sub-scores non-negative; word_count integer; confidence in [0,1].\\nEssay: {{{{$json.ocr_text}}}}\"\n        }\n      ]\n    }\n  ]\n}"
      },
      "id": "glmGrade",
      "name": "GLM Grade JSON",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2920,
        120
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract JSON from GLM response and validate\nfunction tryParseJson(s) {\n  try { return JSON.parse(s); } catch { return null; }\n}\nconst choice = $json.choices && $json.choices[0] ? $json.choices[0] : null;\nlet raw = choice && choice.message && choice.message.content ? choice.message.content.trim() : '';\n// Remove code fences if any\nraw = raw.replace(/^```json[\r\n]+/i, '').replace(/```$/,'');\n// Heuristic: find first { ... } block\nlet candidate = raw;\nconst firstBrace = raw.indexOf('{');\nconst lastBrace = raw.lastIndexOf('}');\nif (firstBrace !== -1 && lastBrace !== -1) { candidate = raw.slice(firstBrace, lastBrace + 1); }\nlet data = tryParseJson(candidate) || tryParseJson(raw) || {};\n// Basic shape enforcement\nconst ocrText = $items('Fn Extract OCR')[0].json.ocr_text || '';\nconst sourceId = $items(0,0).json.file_name || '';\nconst model = $items('Config')[0].json.glm_vision_model;\nconst rubricVersion = $items('Config')[0].json.rubric_version;\nfunction num(n, d=0){ const v = Number(n); return Number.isFinite(v) ? v : d; }\nfunction str(s, d=''){ return typeof s === 'string' ? s : d; }\nconst maxScore = Number($items('Config')[0].json.total_score_max) || 25;\n// Defaults\nconst result = {\n  source_id: str(data.source_id, sourceId),\n  total_score: Math.max(0, Math.min(maxScore, num(data.total_score))),\n  content_relevance: Math.max(0, num(data.content_relevance)),\n  structure_coherence: Math.max(0, num(data.structure_coherence)),\n  language_accuracy: Math.max(0, num(data.language_accuracy)),\n  vocabulary_richness: Math.max(0, num(data.vocabulary_richness)),\n  word_count: Math.max(0, Math.floor(num(data.word_count, ocrText.split(/\s+/).filter(Boolean).length))),\n  reasons: {\n    content: str(data?.reasons?.content),\n    structure: str(data?.reasons?.structure),\n    language: str(data?.reasons?.language),\n    overall: str(data?.reasons?.overall)\n  },\n  extracted_text: str(data.extracted_text, ocrText),\n  rubric_version: str(data.rubric_version, rubricVersion),\n  model_name: str(data.model_name, model),\n  confidence: Math.max(0, Math.min(1, Number.isFinite(Number(data.confidence)) ? Number(data.confidence) : 0.7))\n};\nreturn [{ json: result }];"
      },
      "id": "fnEnsureJson",
      "name": "Fn Ensure JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        3140,
        120
      ]
    },
    {
      "parameters": {
        "functionCode": "// Map to Feishu Bitable fields\nconst cfg = $items('Config')[0].json;\nconst src = $items(0,0).json;\nconst fields = {\n  '来源类型': src.source_type || 'supabase',\n  '文件标识': src.file_name || src.source_id || '',\n  '图片URL': src.image_url || '',\n  'OCR文本': $json.extracted_text || '',\n  '总分': $json.total_score,\n  '内容相关性': $json.content_relevance,\n  '结构连贯': $json.structure_coherence,\n  '语言准确性': $json.language_accuracy,\n  '词汇丰富度': $json.vocabulary_richness,\n  '字数': $json.word_count,\n  '评分说明-内容': $json.reasons?.content || '',\n  '评分说明-结构': $json.reasons?.structure || '',\n  '评分说明-语言': $json.reasons?.language || '',\n  '评分说明-总体': $json.reasons?.overall || '',\n  '审核状态': cfg.audit_status_default || '待审核',\n  '模型': $json.model_name,\n  'Rubric版本': $json.rubric_version,\n  '置信度': $json.confidence,\n  '创建时间': new Date().toISOString()\n};\nreturn [{ json: { fields } }];"
      },
      "id": "fnMapBitable",
      "name": "Fn Map -> Bitable Fields",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        3360,
        120
      ]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal",
        "jsonParameters": true,
        "options": {},
        "sendBody": true,
        "bodyParametersJson": "={\n  \"app_id\": \"{{$env.FEISHU_APP_ID}}\",\n  \"app_secret\": \"{{$env.FEISHU_APP_SECRET}}\"\n}"
      },
      "id": "feishuToken",
      "name": "Feishu Tenant Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        3580,
        120
      ]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "=https://open.feishu.cn/open-apis/bitable/v1/apps/{{$items('Config')[0].json.bitable_app_token}}/tables/{{$items('Config')[0].json.bitable_table_id}}/records/batch_create",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$items('Feishu Tenant Token')[0].json.tenant_access_token}}\",\n  \"Content-Type\": \"application/json; charset=utf-8\"\n}",
        "sendBody": true,
        "bodyParametersJson": "={\n  \"records\": [ { \n    \"fields\": {{$json.fields}} \n  } ]\n}"
      },
      "id": "bitableCreate",
      "name": "Feishu Bitable Create",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        3800,
        120
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "splitBatches",
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        900,
        320
      ]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal",
        "jsonParameters": true,
        "options": {},
        "sendBody": true,
        "bodyParametersJson": "={\n  \"app_id\": \"{{$env.FEISHU_APP_ID}}\",\n  \"app_secret\": \"{{$env.FEISHU_APP_SECRET}}\"\n}"
      },
      "id": "feishuToken2",
      "name": "Feishu Token (List Files)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        960,
        420
      ]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "GET",
        "url": "=https://open.feishu.cn/open-apis/drive/v1/files",
        "allowUnauthorizedCerts": false,
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$items('Feishu Token (List Files)')[0].json.tenant_access_token}}\"\n}",
        "sendQuery": true,
        "queryParametersJson": "={\n  \"folder_token\": \"{{$items('Config')[0].json.feishu_folder_token}}\"\n}"
      },
      "id": "feishuListFiles",
      "name": "Feishu List Files",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1180,
        420
      ]
    },
    {
      "parameters": {
        "functionCode": "// Normalize Feishu files list\nconst token = $items('Feishu Token (List Files)')[0].json.tenant_access_token;\nconst files = $json.data && $json.data.files ? $json.data.files : [];\nreturn files.map(f => ({ json: { source_type: 'feishu', file_token: f.token || f.file_token || f.file?.token, file_name: f.name, tenant_access_token: token } }));"
      },
      "id": "fnFeishuNormalize",
      "name": "Fn Normalize Feishu",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1400,
        420
      ]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "GET",
        "url": "=https://open.feishu.cn/open-apis/drive/v1/files/{{$json.file_token}}/download",
        "jsonParameters": false,
        "sendHeaders": true,
        "headerParametersJson": "={\n  \"Authorization\": \"Bearer {{$json.tenant_access_token}}\"\n}",
        "responseFormat": "file",
        "options": {}
      },
      "id": "feishuDownload",
      "name": "Feishu Download Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1620,
        420
      ]
    },
    {
      "parameters": {
        "options": {},
        "setAllData": false,
        "binaryPropertyName": "data",
        "dataIsBase64": true
      },
      "id": "feishuBinaryToBase64",
      "name": "Feishu Binary -> Base64",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        1840,
        420
      ]
    },
    {
      "parameters": {
        "functionCode": "const mime = $binary.data && $binary.data.mimeType ? $binary.data.mimeType : 'image/jpeg';\nconst b64 = $json.data;\nreturn [{ json: { source_type: 'feishu', file_name: $items('Fn Normalize Feishu')[0].json.file_name, file_token: $items('Fn Normalize Feishu')[0].json.file_token, image_data_url: `data:${mime};base64,${b64}` } }];"
      },
      "id": "fnFeishuDataUrl",
      "name": "Fn Feishu To Data URL",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        2060,
        420
      ]
    }
  ],
  "connections": {
    "Config": {
      "main": [
        [
          {
            "node": "IF Source = Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Source = Supabase": {
      "main": [
        [
          {
            "node": "Supabase List Objects",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Feishu Token (List Files)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase List Objects": {
      "main": [
        [
          {
            "node": "Split Supabase Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Supabase Items": {
      "main": [
        [
          {
            "node": "Fn Normalize Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Normalize Supabase": {
      "main": [
        [
          {
            "node": "Fn Supabase Public URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Supabase Public URL": {
      "main": [
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "Binary -> Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Binary -> Base64": {
      "main": [
        [
          {
            "node": "Fn To Data URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn To Data URL": {
      "main": [
        [
          {
            "node": "GLM-4V OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GLM-4V OCR": {
      "main": [
        [
          {
            "node": "Fn Extract OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Extract OCR": {
      "main": [
        [
          {
            "node": "GLM Grade JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GLM Grade JSON": {
      "main": [
        [
          {
            "node": "Fn Ensure JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Ensure JSON": {
      "main": [
        [
          {
            "node": "Fn Map -> Bitable Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Map -> Bitable Fields": {
      "main": [
        [
          {
            "node": "Feishu Tenant Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feishu Tenant Token": {
      "main": [
        [
          {
            "node": "Feishu Bitable Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feishu Token (List Files)": {
      "main": [
        [
          {
            "node": "Feishu List Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feishu List Files": {
      "main": [
        [
          {
            "node": "Fn Normalize Feishu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Normalize Feishu": {
      "main": [
        [
          {
            "node": "Feishu Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feishu Download Image": {
      "main": [
        [
          {
            "node": "Feishu Binary -> Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feishu Binary -> Base64": {
      "main": [
        [
          {
            "node": "Fn Feishu To Data URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Feishu To Data URL": {
      "main": [
        [
          {
            "node": "GLM-4V OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "saveExecutionProgress": true
  },
  "staticData": null,
  "id": "gaokao-essay-grader"
}


